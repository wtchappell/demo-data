#!/usr/bin/env ruby
require 'optparse'
require_relative '../lib/broadband_api'

class Main
  def initialize
    @parser  = build_parser
    @names   = []
    @options = {}
  end

  def run(args)
    @args = args
    parse_args

    bb_api    = BroadbandAPI.new
    demo_data = bb_api.query_demographics_by_state_name(*@names)

    case(@options[:output_format].to_sym)
    when :CSV
      print_csv(demo_data)
    when :averages
      print_avg(demo_data)
    end
  rescue => e
    abort(e.message)
  end

  private

  def build_parser
    OptionParser.new do |parser|
      parser.banner = 'Usage: demo-data [OPTION]... STATE_NAMES_CSV'

      parser.on(
        '-f',
        '--output-format FORMAT',
        'CSV for each state, or average of income below poverty across them'
      ) do |o|
        @options[:output_format] = o
      end

      parser.on_tail('-h', '--help', 'Prints this help') do
        puts parser
        exit
      end
    end
  end

  def parse_args
    @parser.parse!(@args)
    validate_options
    @names = @args.first.split(',').uniq
  end

  IMPORTANT_FIELDS = %w[
    geographyName
    population
    households
    incomeBelowPoverty
    medianIncome
  ]
  def print_csv(demo_data)
    rows = demo_data.map do |data|
      IMPORTANT_FIELDS.map { |field| data[field] }.join(',')
    end
    puts rows
  end

  def print_avg(demo_data)
    total_weight = demo_data.map { |data| data['population'] }.reduce(&:+)
    weighted_sum = 0
    demo_data.reduce(0.0) do |memo, data|
      weighted_sum += data['incomeBelowPoverty'] * data['population']
    end
    # The input had 4 significant figures.
    weighted_avg = (weighted_sum / total_weight).round(4)
    puts weighted_avg
  end

  FORMATS = %w[CSV averages]
  def validate_options
    unless @options.key?(:output_format)
      @parser.abort('Output format is required.')
    end

    unless FORMATS.include?(@options[:output_format])
      @parser.abort("Output format required; must be one of #{FORMATS}.")
    end

    if    @args.size > 1
      @parser.abort('Only one CSV list accepted.')
    elsif @args.size < 1
      @parser.abort('At least one CSV list required.')
    end
  end
end

Main.new.run(ARGV)

# vim: set ft=ruby ts=2 sw=2 tw=79 :
